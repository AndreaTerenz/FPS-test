[gd_scene load_steps=6 format=2]

[ext_resource path="res://Assets/Models/gltf test/floater.glb" type="PackedScene" id=1]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode cull_disabled, unshaded, shadows_disabled;

uniform int stripes : hint_range(1, 20) = 4;
uniform float scale : hint_range(0., 1.) = .2;
uniform float definition : hint_range(0., 1.) = .2;
uniform float speed : hint_range(.5, 20.) = 8.;
uniform float min_y : hint_range(0., 1.) = 0.;
uniform float max_y : hint_range(0., 1.) = 1.;
uniform vec4 tint : hint_color = vec4(0., .2, 1., 1.);

float remap_range(float value, float InputA, float InputB, float OutputA, float OutputB) {
    return(value - InputA) / (InputB - InputA) * (OutputB - OutputA) + OutputA;
}

bool compare(float v, float target, float delta) {
	return abs(v - target) <= delta/2.0;
}

float smooth_compare(float val, float ref, float delta, float harshness, bool reverse)
{
	float diff = abs(val - ref);
	float output = 1.0 - remap_range(diff, delta * harshness, delta, 0.0, 1.0);
	
	output = (!reverse) ? output : 1.0 - output;
	
	return clamp(output, 0., 1.);
}

void fragment() {
	vec2 pos = UV;
	
	float val = smooth_compare(fract((pos.y - TIME/speed) * float(stripes)), .5, scale, definition, false);
		
	ALBEDO = tint.rgb;
	
	ALPHA = val;
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/stripes = 4
shader_param/scale = 0.2
shader_param/definition = 0.252
shader_param/speed = 2.086
shader_param/min_y = 0.484
shader_param/max_y = 0.8
shader_param/tint = Color( 0.0745098, 0.772549, 1, 1 )

[sub_resource type="Animation" id=3]
resource_name = "Float"
length = 2.0
loop = true
tracks/0/type = "bezier"
tracks/0/path = NodePath("Floater:translation:x")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 1, 2 )
}
tracks/1/type = "bezier"
tracks/1/path = NodePath("Floater:translation:y")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0, 0.830935, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 1, 2 )
}
tracks/2/type = "bezier"
tracks/2/path = NodePath("Floater:translation:z")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 1, 2 )
}

[sub_resource type="Animation" id=4]
length = 0.001
tracks/0/type = "bezier"
tracks/0/path = NodePath("Floater:translation:x")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0 )
}
tracks/1/type = "bezier"
tracks/1/path = NodePath("Floater:translation:y")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0 )
}
tracks/2/type = "bezier"
tracks/2/path = NodePath("Floater:translation:z")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0 )
}

[node name="floater" instance=ExtResource( 1 )]

[node name="Floater trail" parent="Floater" index="0"]
cast_shadow = 0
material/0 = SubResource( 2 )

[node name="OmniLight" type="OmniLight" parent="Floater/Floater trail" index="0"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.529837, 0 )
light_color = Color( 0.027451, 0.678431, 0.878431, 1 )
light_energy = 14.423
light_bake_mode = 0
omni_range = 1.92062

[node name="AnimationPlayer" type="AnimationPlayer" parent="." index="1"]
autoplay = "Float"
anims/Float = SubResource( 3 )
anims/RESET = SubResource( 4 )
