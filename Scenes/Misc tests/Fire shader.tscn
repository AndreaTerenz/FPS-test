[gd_scene load_steps=17 format=2]

[ext_resource path="res://Scenes/UI/Pause menu.tscn" type="PackedScene" id=1]

[sub_resource type="ProceduralSky" id=8]

[sub_resource type="Environment" id=9]
resource_local_to_scene = true
background_mode = 3
background_sky = SubResource( 8 )
background_color = Color( 0.172549, 0.172549, 0.172549, 1 )
tonemap_mode = 4
ss_reflections_fade_in = 0.204906
ssao_intensity = 68.37
glow_enabled = true
glow_bicubic_upscale = true
glow_high_quality = true

[sub_resource type="QuadMesh" id=10]
size = Vector2( 2, 2 )

[sub_resource type="Shader" id=11]
code = "shader_type spatial;
render_mode unshaded;

uniform sampler2D noise_text;
uniform sampler2D noise_text_b;
uniform sampler2D alpha_gradient_text: hint_white;
uniform sampler2D intensity_gradient_text: hint_white;
uniform sampler2D tint_gradient_text: hint_white;
uniform float speed = 1.0;
uniform float speed_b = 2.0;

uniform float threshold : hint_range(0.0, 1.0) = .8;
uniform float fuzziness = 1.4;

float remap_range(float value, float InputA, float InputB, float OutputA, float OutputB) {
    return(value - InputA) / (InputB - InputA) * (OutputB - OutputA) + OutputA;
}

float smooth_compare(float val, float ref, float delta, float harhsness, bool reverse)
{
	float diff = abs(val-ref);
	float output = remap_range(diff, harhsness/2.0, delta/2.0, 0.0, 1.0);
	
	return (reverse) ? 1.0 - output : output;
}

void fragment() {
	float time = TIME * speed;
	vec2 pos = vec2(UV.x, UV.y + time);
	float noise_a = texture(noise_text, pos).r;
	
	vec2 pos_b = vec2(UV.x, UV.y + time * speed_b);
	float noise_b = texture(noise_text_b, pos_b).r;
	
	float noise_avg = (noise_a + noise_b)/2.0;
	
	vec2 gradient_pos = vec2(UV.y, 0);
	float uv_mask = smooth_compare(UV.x, .5, .9, .0, true) * UV.y;
	uv_mask = clamp(uv_mask, 0.0, 1.0);
	
	float alpha_val = texture(alpha_gradient_text, gradient_pos).r;
	float intensity = texture(intensity_gradient_text, gradient_pos).r;
	vec3 tint = texture(tint_gradient_text, gradient_pos).rgb;
	
	ALPHA = uv_mask;

	ALBEDO = tint * vec3(noise_avg);
	EMISSION = tint * vec3(noise_avg);
	
}"

[sub_resource type="Gradient" id=17]
offsets = PoolRealArray( 0.0178571, 0.267857, 0.553571, 0.883929, 1 )
colors = PoolColorArray( 0, 0, 0, 1, 0.137821, 0.137821, 0.137821, 1, 0.256411, 0.256411, 0.256411, 1, 0.517949, 0.517949, 0.517949, 1, 1, 1, 1, 1 )

[sub_resource type="GradientTexture" id=18]
gradient = SubResource( 17 )

[sub_resource type="Gradient" id=21]

[sub_resource type="GradientTexture" id=22]
gradient = SubResource( 21 )

[sub_resource type="OpenSimplexNoise" id=13]

[sub_resource type="NoiseTexture" id=14]
seamless = true
noise = SubResource( 13 )

[sub_resource type="OpenSimplexNoise" id=15]
seed = 6

[sub_resource type="NoiseTexture" id=16]
seamless = true
noise = SubResource( 15 )

[sub_resource type="Gradient" id=19]
offsets = PoolRealArray( 0, 0.388393, 0.883929 )
colors = PoolColorArray( 0, 0, 0, 1, 0.480469, 0.144223, 0.0412903, 1, 0.998047, 0.893363, 0.0409355, 1 )

[sub_resource type="GradientTexture" id=20]
gradient = SubResource( 19 )

[sub_resource type="ShaderMaterial" id=12]
shader = SubResource( 11 )
shader_param/speed = 1.0
shader_param/speed_b = 2.0
shader_param/threshold = 0.462
shader_param/fuzziness = 1.202
shader_param/noise_text = SubResource( 14 )
shader_param/noise_text_b = SubResource( 16 )
shader_param/alpha_gradient_text = SubResource( 18 )
shader_param/intensity_gradient_text = SubResource( 22 )
shader_param/tint_gradient_text = SubResource( 20 )

[node name="Spatial" type="Spatial"]

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource( 9 )

[node name="Camera" type="Camera" parent="."]
transform = Transform( -1, 0, 8.74228e-08, 0, 1, 0, -8.74228e-08, 0, -1, 2.5185e-07, 0, -2.88082 )
fov = 46.6

[node name="Pause menu" parent="." instance=ExtResource( 1 )]

[node name="MeshInstance" type="MeshInstance" parent="."]
transform = Transform( -1, 0, -8.74228e-08, 0, 1, 0, 8.74228e-08, 0, -1, 0, 0, 0 )
mesh = SubResource( 10 )
material/0 = SubResource( 12 )
