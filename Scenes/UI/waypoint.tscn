[gd_scene load_steps=3 format=2]

[ext_resource path="res://Scenes/UI/waypoint.svg" type="Texture" id=1]

[sub_resource type="GDScript" id=1]
script/source = "extends Control

# Some margin to keep the marker away from the screen's corners.
const MARGIN = 8

enum MARKER_MODE {
	ALWAYS,
	NEVER,
	OFFSCREEN,
	ONSCREEN
}

onready var camera = get_viewport().get_camera()
onready var parent = get_parent()
onready var canvas = $CanvasLayer
onready var label = $CanvasLayer/Label
onready var marker = $CanvasLayer/Marker

export var text = \"Waypoint\" setget set_text
export(Color) var mod_color = Color.white
export(int) var layer = -1
export(MARKER_MODE) var marker_mode = MARKER_MODE.ALWAYS

func _ready() -> void:
	self.text = text
	self.modulate = mod_color
	self.marker.visible = (marker_mode != MARKER_MODE.NEVER)
	
	canvas.layer = layer
	
	if not parent is Spatial:
		push_error(\"The waypoint's parent node must inherit from Spatial.\")


func _process(_delta):
	if not camera.current:
		# If the camera we have isn't the current one, get the current camera.
		camera = get_viewport().get_camera()
	var parent_translation = parent.global_translation
	var camera_transform = camera.global_transform
	var camera_translation = camera_transform.origin

	# We would use \"camera.is_position_behind(parent_translation)\", except
	# that it also accounts for the near clip plane, which we don't want.
	var is_behind = camera_transform.basis.z.dot(parent_translation - camera_translation) > 0

	# Fade the waypoint when the camera gets close.
	var distance = camera_translation.distance_to(parent_translation)
	modulate.a = clamp(range_lerp(distance, 0, 2, 0, 1), 0, 1 )

	var unprojected_position = camera.unproject_position(parent_translation)
	# `get_size_override()` will return a valid size only if the stretch mode is `2d`.
	# Otherwise, the viewport size is used directly.
	var viewport_base_size = (
			get_viewport().get_size_override() if get_viewport().get_size_override() > Vector2(0, 0)
			else get_viewport().size
	)

	var sticky = (marker_mode in [MARKER_MODE.ALWAYS, MARKER_MODE.OFFSCREEN])
	if not sticky:
		# For non-sticky waypoints, we don't need to clamp and calculate
		# the position if the waypoint goes off screen.
		canvas.offset = unprojected_position
		canvas.visible = not is_behind
		return

	# We need to handle the axes differently.
	# For the screen's X axis, the projected position is useful to us,
	# but we need to force it to the side if it's also behind.
	if is_behind:
		if unprojected_position.x < viewport_base_size.x / 2:
			unprojected_position.x = viewport_base_size.x - MARGIN
		else:
			unprojected_position.x = MARGIN

	# For the screen's Y axis, the projected position is NOT useful to us
	# because we don't want to indicate to the user that they need to look
	# up or down to see something behind them. Instead, here we approximate
	# the correct position using difference of the X axis Euler angles
	# (up/down rotation) and the ratio of that with the camera's FOV.
	# This will be slightly off from the theoretical \"ideal\" position.
	if is_behind or unprojected_position.x < MARGIN or \\
			unprojected_position.x > viewport_base_size.x - MARGIN:
		var look = camera_transform.looking_at(parent_translation, Vector3.UP)
		var diff = angle_diff(look.basis.get_euler().x, camera_transform.basis.get_euler().x)
		unprojected_position.y = viewport_base_size.y * (0.5 + (diff / deg2rad(camera.fov)))

	canvas.offset = Vector2(
			clamp(unprojected_position.x, MARGIN, viewport_base_size.x - MARGIN),
			clamp(unprojected_position.y, MARGIN, viewport_base_size.y - MARGIN)
	)

	marker.visible = (marker_mode != MARKER_MODE.NEVER)
	label.visible = true
	canvas.rotation = 0
	# Used to display a diagonal arrow when the waypoint is displayed in
	# one of the screen corners.
	var overflow = 0

	if canvas.offset.x <= MARGIN:
		# Left overflow.
		overflow = -PI/4
		label.visible = false
		canvas.rotation = PI/2
	elif canvas.offset.x >= viewport_base_size.x - MARGIN:
		# Right overflow.
		overflow = PI/4
		label.visible = false
		canvas.rotation = PI*3/2

	if canvas.offset.y <= MARGIN:
		# Top overflow.
		label.visible = false
		canvas.rotation = PI + overflow
	elif canvas.offset.y >= viewport_base_size.y - MARGIN:
		# Bottom overflow.
		label.visible = false
		canvas.rotation = -overflow
		
	if marker_mode == MARKER_MODE.OFFSCREEN:
		marker.visible = not label.visible


func set_text(p_text):
	text = p_text

	# The label's text can only be set once the node is ready.
	if is_inside_tree():
		label.text = p_text


static func angle_diff(from, to):
	var diff = fmod(to - from, TAU)
	return fmod(2.0 * diff, TAU) - diff
"

[node name="Waypoint" type="Control"]
script = SubResource( 1 )

[node name="CanvasLayer" type="CanvasLayer" parent="."]
layer = -1

[node name="Label" type="Label" parent="CanvasLayer"]
anchor_left = 0.5
anchor_right = 0.5
margin_left = -1014.5
margin_top = -51.0
margin_right = -905.5
margin_bottom = -18.0
custom_colors/font_color_shadow = Color( 0, 0, 0, 0.501961 )
custom_constants/shadow_offset_x = 1
custom_constants/shadow_offset_y = 1
text = "Waypoint"
align = 1
valign = 1

[node name="Marker" type="TextureRect" parent="CanvasLayer"]
visible = false
margin_left = -8.0
margin_top = -16.0
margin_right = 120.0
margin_bottom = 112.0
rect_scale = Vector2( 0.125, 0.125 )
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_editor_description_": "An high-resolution texture is used and scaled down so the demo looks good at higher resolutions."
}
