[gd_resource type="ShaderMaterial" load_steps=6 format=2]

[ext_resource path="res://Assets/Models/HL rocket/Textures/Terrain_rough.png" type="Texture" id=1]
[ext_resource path="res://Assets/Models/HL rocket/Textures/Terrain_diff.png" type="Texture" id=2]
[ext_resource path="res://Assets/Models/HL rocket/Textures/Terrain_met.png" type="Texture" id=3]
[ext_resource path="res://Assets/Models/HL rocket/Textures/Terrain_bump.png" type="Texture" id=4]

[sub_resource type="Shader" id=1]
code = "// NOTE: Shader automatically converted from Godot Engine 3.5.beta3's SpatialMaterial.

shader_type spatial;
render_mode async_visible,blend_mix,depth_draw_opaque,cull_disabled,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform sampler2D texture_metallic : hint_white;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_white;
uniform vec4 roughness_texture_channel;
uniform sampler2D texture_normal : hint_normal;
uniform float normal_scale : hint_range(-16,16);

uniform sampler2D height_map : hint_black;
uniform bool use_heightmap = false;

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

vec2 stdNormalMap(float height) 
{
    return -vec2(dFdx(height), dFdy(height));
}


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}

void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	albedo_tex *= COLOR;
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	
	if (!use_heightmap)
		NORMALMAP = texture(texture_normal,base_uv).rgb;
	else {
		float h = texture(height_map, UV).r;
		NORMALMAP = vec3(stdNormalMap(h) * 3., 1.);
	}
		
	NORMALMAP_DEPTH = normal_scale;
}
"

[resource]
resource_name = "Material.001"
shader = SubResource( 1 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 0.5
shader_param/metallic = 1.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/metallic_texture_channel = Plane( 1, 0, 0, 0 )
shader_param/roughness_texture_channel = Plane( 1, 0, 0, 0 )
shader_param/normal_scale = 1.0
shader_param/use_heightmap = true
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/texture_albedo = ExtResource( 2 )
shader_param/texture_metallic = ExtResource( 3 )
shader_param/texture_roughness = ExtResource( 1 )
shader_param/height_map = ExtResource( 4 )
